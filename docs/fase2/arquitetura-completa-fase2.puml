@startuml Arquitetura Completa - Sistema de Autoatendimento Fast Food - Fase 2
!theme plain
skinparam backgroundColor #FFFFFF
skinparam defaultFontName Arial
skinparam defaultFontSize 10

title Arquitetura Completa - Sistema de Autoatendimento Fast Food - Fase 2

' Defini√ß√£o de cores
skinparam rectangle {
    BackgroundColor<<Cliente>> #FFEAA7
    BackgroundColor<<Frontend>> #74B9FF
    BackgroundColor<<API>> #FF6B6B
    BackgroundColor<<Service>> #4ECDC4
    BackgroundColor<<Database>> #96CEB4
    BackgroundColor<<HPA>> #FD79A8
    BackgroundColor<<ConfigMap>> #A29BFE
    BackgroundColor<<Secret>> #D63031
    BackgroundColor<<External>> #00B894
    BackgroundColor<<Monitor>> #FDCB6E
}

' ===== PROBLEMA DE NEG√ìCIO =====
package "üéØ PROBLEMA DE NEG√ìCIO" {
    rectangle "Lanchonete em Expans√£o" as Lanchonete <<Cliente>>
    note right of Lanchonete
        **Problema Identificado:**
        - Atendimento ca√≥tico sem sistema
        - Pedidos perdidos ou mal interpretados
        - Clientes insatisfeitos
        - Perda de neg√≥cios
        - **Problemas de performance** nos hor√°rios de pico
        
        **Solu√ß√£o:**
        Sistema de autoatendimento
        com controle completo e
        infraestrutura escal√°vel
    end note
}

' ===== FRONTEND =====
package "üñ•Ô∏è FRONTEND" {
    rectangle "Totem de Autoatendimento" as Totem <<Frontend>>
    note right of Totem
        **Interface do Cliente:**
        - Sele√ß√£o de produtos
        - Identifica√ß√£o (CPF/Email)
        - Montagem de combo
        - Pagamento via QR Code
        - Acompanhamento do pedido
    end note
    
    rectangle "Monitor da Cozinha" as MonitorCozinha <<Monitor>>
    note right of MonitorCozinha
        **Painel da Cozinha:**
        - Lista de pedidos em tempo real
        - Status: Recebido > Em Prepara√ß√£o > Pronto
        - Ordena√ß√£o por prioridade
        - Tempo de espera
    end note
    
    rectangle "Painel Administrativo" as AdminPanel <<Frontend>>
    note right of AdminPanel
        **Gest√£o do Estabelecimento:**
        - Gerenciar produtos/categorias
        - Acompanhar pedidos
        - Gest√£o de clientes
        - Campanhas promocionais
    end note
}

' ===== INFRAESTRUTURA KUBERNETES =====
package "‚ò∏Ô∏è INFRAESTRUTURA KUBERNETES" {
    package "Namespace: postech-fase2" {
        
        ' Ingress
        rectangle "Ingress Controller" as Ingress <<API>>
        note right of Ingress
            **Nginx Ingress:**
            - SSL/TLS Termination
            - Load Balancing
            - Path-based routing
            - Rate limiting
        end note
        
        ' Services
        rectangle "postech-app-service" as Service <<Service>>
        note right of Service
            **Service:**
            - Type: ClusterIP
            - Port: 8000
            - Load Balancer interno
            - Health checks
        end note
        
        ' Deployments
        rectangle "postech-app-deployment" as Deployment <<API>>
        note right of Deployment
            **Deployment:**
            - Replicas: 2-10 (HPA)
            - Image: postech-app:latest
            - Resources:
              * CPU: 500m-1000m
              * Memory: 512Mi-1Gi
            - Health Checks:
              * Liveness Probe
              * Readiness Probe
        end note
        
        ' HPA - SOLU√á√ÉO PARA PERFORMANCE
        rectangle "postech-app-hpa" as HPA <<HPA>>
        note right of HPA
            **HPA - Solu√ß√£o para Performance:**
            - Min Replicas: 2
            - Max Replicas: 10
            - Target CPU: 70%
            - Target Memory: 80%
            - Scale Up: 30s
            - Scale Down: 300s
            
            **Resolve problemas de:**
            - Picos de demanda
            - Lentid√£o no atendimento
            - Timeout de pedidos
            - Performance do totem
        end note
        
        ' ConfigMaps
        rectangle "postech-app-config" as ConfigMap <<ConfigMap>>
        note right of ConfigMap
            **ConfigMap:**
            - DB_HOST, DB_PORT, DB_NAME
            - LOG_LEVEL, API_VERSION
            - MERCADOPAGO_PUBLIC_KEY
            - Environment variables
        end note
        
        ' Secrets
        rectangle "postech-app-secret" as Secret <<Secret>>
        note right of Secret
            **Secret:**
            - DB_USER, DB_PASSWORD
            - JWT_SECRET
            - MERCADOPAGO_ACCESS_TOKEN
            - Credenciais sens√≠veis
        end note
        
        ' Database
        rectangle "postgres-deployment" as Database <<Database>>
        note right of Database
            **Database:**
            - Persistent Volume
            - Backup autom√°tico
            - Replica√ß√£o
            - Tabelas:
              * clientes, produtos
              * pedidos, pagamentos
              * categorias
        end note
    }
}

' ===== SERVI√áOS EXTERNOS =====
package "üåê SERVI√áOS EXTERNOS" {
    rectangle "Mercado Pago" as MercadoPago <<External>>
    note right of MercadoPago
        **Integra√ß√£o Real:**
        - QR Code para pagamento
        - Webhook para confirma√ß√£o
        - Consulta de status
        - Processamento seguro
    end note
    
    rectangle "Render (Alternativa)" as Render <<External>>
    note right of Render
        **Deploy Gratuito:**
        - PostgreSQL gerenciado
        - SSL autom√°tico
        - Deploy autom√°tico
        - Webhooks funcionam
    end note
}

' ===== FLUXO DE DADOS =====
package "üîÑ FLUXO DE DADOS" {
    rectangle "API FastAPI" as API <<API>>
    note right of API
        **Endpoints P√∫blicos:**
        - /v1/api/pedidos/ (criar)
        - /v1/api/pedidos/checkout
        - /v1/api/pedidos/{id} (status)
        - /v1/api/produtos/ (listar)
        - /v1/api/clientes/ (criar)
        - /v1/api/pagamento/qrcode
        - /v1/api/pagamento/{id}/status
        - /v1/api/pagamento/webhook
        
        **Endpoints Admin:**
        - /v1/api/admin/login
        - /v1/api/admin/pedidos/ (gest√£o)
        - /v1/api/admin/produtos/ (gest√£o)
        - /v1/api/admin/clientes/ (gest√£o)
    end note
    
    rectangle "Clean Architecture" as CleanArch <<API>>
    note right of CleanArch
        **Arquitetura Limpa:**
        - Use Cases organizados
        - Entidades de dom√≠nio
        - Controllers
        - Gateways
    end note
}

' ===== RELACIONAMENTOS =====
' Cliente -> Frontend
Lanchonete --> Totem
Lanchonete --> MonitorCozinha
Lanchonete --> AdminPanel

' Frontend -> API
Totem --> Ingress
MonitorCozinha --> Ingress
AdminPanel --> Ingress

' API -> Services
Ingress --> Service
Service --> Deployment
Deployment --> API
API --> CleanArch

' Kubernetes Components
Deployment --> HPA
Deployment --> ConfigMap
Deployment --> Secret
Deployment --> Database

' External Services
API --> MercadoPago
API --> Render

' ===== LEGENDA =====
legend right
    |Cor|Componente|
    |#FFEAA7|Cliente/Neg√≥cio|
    |#74B9FF|Frontend|
    |#FF6B6B|API/Ingress|
    |#4ECDC4|Service|
    |#96CEB4|Database|
    |#FD79A8|HPA (Performance)|
    |#A29BFE|ConfigMap|
    |#D63031|Secret|
    |#00B894|Servi√ßos Externos|
    |#FDCB6E|Monitor|
endlegend

@enduml 